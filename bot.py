import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
)
from datetime import datetime
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHECK_USER, ADD_SCAMMER_NICK, ADD_SCAMMER_PROOF, MODERATION_CHOICE, MODERATION_EDIT_NICK, MODERATION_EDIT_STATUS = range(6)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'scam_db.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {
        'users': {},
        'moderation_requests': [],
        'moderators': []  # –°–ø–∏—Å–æ–∫ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
def is_moderator(user_id, data):
    return str(user_id) in data['moderators']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    data = load_data()
    user_id = update.effective_user.id
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data='check_user')],
        [InlineKeyboardButton("‚ö†Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞", callback_data='add_scammer')]
    ]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if is_moderator(user_id, data):
        keyboard.append([InlineKeyboardButton("üõ† –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data='moderation')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω—Ç–∏-—Å–∫–∞–º –±–∞–∑—É Roblox! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞"
def check_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    return CHECK_USER

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def check_user_nick(update: Update, context: CallbackContext) -> int:
    nick = update.message.text.strip().lower()
    data = load_data()
    user_info = data['users'].get(nick, {})
    
    status = user_info.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    date_added = user_info.get('date_added', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    likes = user_info.get('likes', 0)
    dislikes = user_info.get('dislikes', 0)
    
    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ:\n\n"
    text += f"–ù–∏–∫: {nick}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {date_added}\n"
    text += f"üëç {likes} üëé {dislikes}"
    
    keyboard = [
        [
            InlineKeyboardButton("üëç", callback_data=f'like_{nick}'),
            InlineKeyboardButton("üëé", callback_data=f'dislike_{nick}')
        ],
        [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='menu')]
    ]
    
    update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
def rate_user(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    action, nick = query.data.split('_')
    data = load_data()
    
    if nick not in data['users']:
        data['users'][nick] = {'status': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'likes': 0, 'dislikes': 0, 'date_added': datetime.now().strftime('%d.%m.%Y')}
    
    if action == 'like':
        data['users'][nick]['likes'] = data['users'][nick].get('likes', 0) + 1
    else:
        data['users'][nick]['dislikes'] = data['users'][nick].get('dislikes', 0) + 1
    
    save_data(data)
    
    likes = data['users'][nick]['likes']
    dislikes = data['users'][nick]['dislikes']
    
    query.answer()
    query.edit_message_text(
        text=query.message.text.split('\n\n')[0] + f"\n\nüëç {likes} üëé {dislikes}",
        reply_markup=query.message.reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞"
def add_scammer(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —Å–∫–∞–º–µ—Ä–∞:")
    return ADD_SCAMMER_NICK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞
def add_scammer_nick(update: Update, context: CallbackContext) -> int:
    nick = update.message.text.strip().lower()
    context.user_data['scammer_nick'] = nick
    update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π):")
    return ADD_SCAMMER_PROOF

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å–∫–∞–º–∞
def add_scammer_proof(update: Update, context: CallbackContext) -> int:
    proof = ""
    if update.message.video:
        proof = f"–í–∏–¥–µ–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (file_id: {update.message.video.file_id})"
    elif update.message.text:
        proof = update.message.text
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏.")
        return ADD_SCAMMER_PROOF
    
    nick = context.user_data['scammer_nick']
    user_id = update.effective_user.id
    date = datetime.now().strftime('%d.%m.%Y')
    
    data = load_data()
    data['moderation_requests'].append({
        'nick': nick,
        'proof': proof,
        'reported_by': user_id,
        'date': date,
        'status': 'pending'
    })
    save_data(data)
    
    update.message.reply_text(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='menu')]])
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–µ—Ä–∞—Ü–∏—è" (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
def moderation(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞—è–≤–∫–∏", callback_data='moderation_requests')],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='moderation_edit')],
        [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='menu')]
    ]
    
    query.edit_message_text(
        text="–†–∞–∑–¥–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏" –≤ —Ä–∞–∑–¥–µ–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
def moderation_requests(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    data = load_data()
    pending_requests = [r for r in data['moderation_requests'] if r['status'] == 'pending']
    
    if not pending_requests:
        query.edit_message_text(
            text="–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='moderation')]])
        )
        return
    
    request = pending_requests[0]
    nick = request['nick']
    proof = request['proof']
    date = request['date']
    reporter = request['reported_by']
    
    text = f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–∫–∞–º–µ—Ä–∞:\n\n"
    text += f"–ù–∏–∫: {nick}\n"
    text += f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {date}\n"
    text += f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {reporter}\n"
    text += f"–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {proof}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:"
    
    keyboard = [
        [
            InlineKeyboardButton("–°–∫–∞–º–µ—Ä", callback_data=f'mod_decision_{nick}_scammer'),
            InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π", callback_data=f'mod_decision_{nick}_verified')
        ],
        [
            InlineKeyboardButton("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", callback_data=f'mod_decision_{nick}_unknown'),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'mod_decision_{nick}_reject')
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='moderation')]
    ]
    
    query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ
def moderation_decision(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    _, _, nick, decision = query.data.split('_')
    query.answer()
    
    data = load_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    for req in data['moderation_requests']:
        if req['nick'] == nick and req['status'] == 'pending':
            req['status'] = decision
            req['moderated_by'] = query.from_user.id
            req['moderated_date'] = datetime.now().strftime('%d.%m.%Y')
            break
    
    # –ï—Å–ª–∏ –Ω–µ "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å", –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if decision != 'reject':
        if nick not in data['users']:
            data['users'][nick] = {
                'likes': 0,
                'dislikes': 0,
                'date_added': datetime.now().strftime('%d.%m.%Y')
            }
        data['users'][nick]['status'] = {
            'scammer': '–°–∫–∞–º–µ—Ä',
            'verified': '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
            'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }[decision]
    
    save_data(data)
    
    query.edit_message_text(
        text=f"–†–µ—à–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–æ–∫—É {nick} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {decision}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='moderation_requests')]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –≤ —Ä–∞–∑–¥–µ–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
def moderation_edit(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    return MODERATION_EDIT_NICK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
def moderation_edit_nick(update: Update, context: CallbackContext) -> int:
    nick = update.message.text.strip().lower()
    context.user_data['edit_nick'] = nick
    data = load_data()
    
    if nick not in data['users']:
        data['users'][nick] = {
            'likes': 0,
            'dislikes': 0,
            'date_added': datetime.now().strftime('%d.%m.%Y'),
            'status': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
        save_data(data)
    
    current_status = data['users'][nick]['status']
    
    keyboard = [
        [
            InlineKeyboardButton("–°–∫–∞–º–µ—Ä", callback_data='mod_status_scammer'),
            InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π", callback_data='mod_status_verified')
        ],
        [
            InlineKeyboardButton("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", callback_data='mod_status_unknown'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='moderation')
        ]
    ]
    
    update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ {nick}: {current_status}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MODERATION_EDIT_STATUS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
def moderation_edit_status(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    _, _, status = query.data.split('_')
    query.answer()
    
    nick = context.user_data['edit_nick']
    data = load_data()
    
    status_map = {
        'scammer': '–°–∫–∞–º–µ—Ä',
        'verified': '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
        'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
    
    data['users'][nick]['status'] = status_map[status]
    data['users'][nick]['date_added'] = datetime.now().strftime('%d.%m.%Y')
    save_data(data)
    
    query.edit_message_text(
        text=f"–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ {nick} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_map[status]}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='moderation')]])
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
def menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main() -> None:
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    with open('config.json') as f:
        config = json.load(f)
    token = config['token']
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Updater –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    updater = Updater(token)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dispatcher.add_handler(CommandHandler('start', start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CallbackQueryHandler(check_user, pattern='^check_user$'))
    dispatcher.add_handler(CallbackQueryHandler(add_scammer, pattern='^add_scammer$'))
    dispatcher.add_handler(CallbackQueryHandler(moderation, pattern='^moderation$'))
    dispatcher.add_handler(CallbackQueryHandler(moderation_requests, pattern='^moderation_requests$'))
    dispatcher.add_handler(CallbackQueryHandler(moderation_edit, pattern='^moderation_edit$'))
    dispatcher.add_handler(CallbackQueryHandler(menu, pattern='^menu$'))
    dispatcher.add_handler(CallbackQueryHandler(rate_user, pattern='^(like|dislike)_'))
    dispatcher.add_handler(CallbackQueryHandler(moderation_decision, pattern='^mod_decision_'))
    dispatcher.add_handler(CallbackQueryHandler(moderation_edit_status, pattern='^mod_status_'))
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    check_user_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(check_user, pattern='^check_user$')],
        states={
            CHECK_USER: [MessageHandler(Filters.text & ~Filters.command, check_user_nick)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞
    add_scammer_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_scammer, pattern='^add_scammer$')],
        states={
            ADD_SCAMMER_NICK: [MessageHandler(Filters.text & ~Filters.command, add_scammer_nick)],
            ADD_SCAMMER_PROOF: [MessageHandler(Filters.video | Filters.text & ~Filters.command, add_scammer_proof)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    moderation_edit_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(moderation_edit, pattern='^moderation_edit$')],
        states={
            MODERATION_EDIT_NICK: [MessageHandler(Filters.text & ~Filters.command, moderation_edit_nick)],
            MODERATION_EDIT_STATUS: [CallbackQueryHandler(moderation_edit_status, pattern='^mod_status_')],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    dispatcher.add_handler(check_user_conv)
    dispatcher.add_handler(add_scammer_conv)
    dispatcher.add_handler(moderation_edit_conv)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()